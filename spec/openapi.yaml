openapi: 3.0.3
info:
  title: Grid Stream API Spec - OpenAPI 3.0
  description: |-
    API spec for Grid Stream.
    
    Some useful links:
    - [API repository](https://github.com/grid-stream-org/api)
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: eric.cuenat@unb.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Grid Stream
  url: https://github.com/grid-stream-org
servers:
  - url: TODO
tags:
  - name: projects
    description: Everything about projects, projects represent a residence with a DR contract
  - name: contracts
    description: Everything about contracts that represent what a project must satisfy during a DR event
  - name: devices
    description: Everything about devices, a device represents the physical controller attached to the smart meter of a project(residence).
  - name: distributed energy resource (DER)
    description: Everything about distributed energy resources (DERs). These devices are what offload energy back into the smart grid.
  - name: user
    description: Operations about user
paths:
  /v1/projects:
    post:
      tags:
        - projects
      summary: Create a new project
      description: Creates a new project. The `projectId` will be generated by the backend.
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Successfully created project
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: string
                    example: "projID_123456789"
                  project:
                    $ref: '#/components/schemas/Project'
        '400':
          description: Invalid project data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    
  /v1/contracts:
    post:
      tags:
        - contracts
      summary: Create a new contract
      description: Creates a new contract. The `contractId` will be generated by the backend.
      operationId: createContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractInput'
      responses:
        '201':
          description: Successfully created contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: string
                    example: "projID_123456789"
                  project:
                    $ref: '#/components/schemas/Contract'
        '400':
          description: Invalid contract data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
        
  /v1/contracts/{contractId}:
    get:
      tags:
        - contracts
      summary: Get existing contract by ID
      description: Returns a single contract by its ID
      operationId: getContractById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found contract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '404':
          description: Contract not found
        '400':
          description: Invalid contract ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    put:
      tags:
        - contracts
      summary: Update an existing contract
      description: Updates the details of a contract
      operationId: updateContract
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
      responses:
        '200':
          description: Successfully updated contract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '404':
          description: Contract not found
        '400':
          description: Invalid contract data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    delete:
      tags:
        - contracts
      summary: Delete an existing contract
      description: Deletes a contract by its ID
      operationId: deleteContract
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted contract
        '404':
          description: Contract not found
        '400':
          description: Invalid contract ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    
  /v1/der-metadata:
    post:
      tags:
        - der-metadata
      summary: Create DER metadata
      description: >
        Creates metadata for a Distributed Energy Resource (DER). 
        The `derId` will be generated by the backend and included in the response.
      operationId: createDERMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DERInput'
      responses:
        '201':
          description: Successfully created DER metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  derId:
                    $ref: '#/components/schemas/DERId'
                  derMetadata:
                    $ref: '#/components/schemas/DERMetadata'
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized request
      security:
        - firebase_auth: []

  /v1/der-metadata/{derId}:
    get:
      tags:
        - der-metadata
      summary: Get DER metadata by ID
      description: Returns metadata for a Distributed Energy Resource (DER) by its ID
      operationId: getDERMetadataById
      parameters:
        - name: derId
          in: path
          description: ID of the DER to retrieve metadata for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found DER metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DERMetadata'
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  
    put:
      tags:
        - der-metadata
      summary: Update existing DER metadata
      description: Updates the metadata for a Distributed Energy Resource (DER)
      operationId: updateDERMetadata
      parameters:
        - name: derId
          in: path
          description: ID of the DER to update metadata for
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DERMetadata'
      responses:
        '200':
          description: Successfully updated DER metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DERMetadata'
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  
    delete:
      tags:
        - der-metadata
      summary: Delete DER metadata
      description: Deletes metadata for a Distributed Energy Resource (DER) by its ID
      operationId: deleteDERMetadata
      parameters:
        - name: derId
          in: path
          description: ID of the DER to delete metadata for
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted DER metadata
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []

  
  /v1/projects/{projectId}:
    get:
      tags:
        - projects
      summary: Get existing project by Id
      description: Returns a single project
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          description: ID of project to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully found project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: project not found
        '400':
          description: Invalid project id
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    put:
      tags:
        - projects
      summary: Update an existing project
      description: Updates the details of a project
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          description: ID of the project to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Successfully updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
        '400':
          description: Invalid project data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  
    delete:
      tags:
        - projects
      summary: Delete an existing project
      description: Deletes a project by its ID
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          description: ID of the project to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted project
        '404':
          description: Project not found
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
        
  /v1/project-averages:
    post:
      tags:
        - project-averages
      summary: Create a new Project Average
      description: >
        Creates a new Project Average record. This endpoint is intended for internal
        use by a service and should not be directly accessed by users.
      operationId: createProjectAverage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAverage'
      responses:
        '201':
          description: Successfully created a Project Average record
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized request
      security:
        - service_account_auth: []
    put:
      tags:
        - project-averages
      summary: Update an existing Project Average
      description: >
        Updates an existing Project Average record. This endpoint is intended for internal
        use by a microservice and should not be directly accessed by users.
      operationId: updateProjectAverage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAverage'
      responses:
        '200':
          description: Successfully updated a Project Average record
        '400':
          description: Invalid data provided
        '404':
          description: Project Average record not found
        '401':
          description: Unauthorized request
      security:
        - service_account_auth: []
    
  /v1/devices:
    post:
      tags:
        - devices
      summary: Create a new device
      description: Creates a new device. The `deviceId` will be generated by the backend.
      operationId: createDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInput'
      responses:
        '201':
          description: Successfully created device
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: string
                    example: "deviceId_123456789"
                  project:
                    $ref: '#/components/schemas/Device'
        '400':
          description: Invalid project data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  /v1/devices/{deviceId}:
    get:
      tags:
        - devices
      summary: Get existing device by ID
      description: Returns a single device by its ID
      operationId: getDeviceById
      parameters:
        - name: deviceId
          in: path
          description: ID of the device to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Device not found
        '400':
          description: Invalid device ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  
    put:
      tags:
        - devices
      summary: Update an existing device
      description: Updates the details of a device
      operationId: updateDevice
      parameters:
        - name: deviceId
          in: path
          description: ID of the device to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Successfully updated device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Device not found
        '400':
          description: Invalid device data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  
    delete:
      tags:
        - devices
      summary: Delete an existing device
      description: Deletes a device by its ID
      operationId: deleteDevice
      parameters:
        - name: deviceId
          in: path
          description: ID of the device to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted device
        '404':
          description: Device not found
        '400':
          description: Invalid device ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    ProjectId:
      type: string
      example: "projID_123456789"
    UserId:
      type: string
      example: "userID_123456789"
    ContractId:
      type: string
      example: "cntractID_123456789"
    DERId:
      type: string
      example: "DERID_123456789"
    DERMetadataId:
      type: string
      example: "DERMetaID_123456789"
    DERDataId:
      type: string
      example: "DERDataID_123456789"
    UtilityId:
      type: string
      example: "utilId_123456789"
    DeviceId:
      type: string
      example: "deviceId_123456789"
    ProjectInput: # for when we create a project
      type: object
      properties:
        utilityId:
          $ref: '#/components/schemas/UtilityId'
        userId:
          $ref: '#/components/schemas/UserId'
        location:
          type: string
    ContractInput: # for when we create a contract
      type: object
      properties:
        contractedLoadReduction:
          type: number
          format: float
          example: 99.8
        startDate:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        status:
          type: string
          enum:
            - active
            - inactive
            - pending
          example: "active"
        projectId:
          $ref: '#/components/schemas/ProjectId'
    DERInput:
      type: object
      properties:
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        deviceType:
          type: string
          enum:
            - solar
            - ev
            - battery
        nameplateCapacity:
          type: number
          format: float
          example: 99.8
        powerCapacity:
          type: number
          format: float
          example: 95.8
      required:
        - deviceId
        - deviceType
        - nameplateCapacity
        - powerCapacity

    DeviceInput: # For creating a Device
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'
    Project:
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'
        utilityId:
          $ref: '#/components/schemas/UtilityId'
        userId:
          $ref: '#/components/schemas/UserId'
        location:
          type: string
          minLength: 1
          maxLength: 20
          example: "Fredericton"
    User:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        phone:
          type: string
          example: "11234561234"
        password:
          type: string
          example: "pa$$w0rd123"
        displayName:
          type: string
          example: "ewic03"
    Contract:
      type: object
      properties:
        contractId:
          $ref: '#/components/schemas/ContractId'
        contractedLoadReduction:
          type: number
          format: float
          example: 99.8
        startDate:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        status:
          type: string
          enum:
            - active
            - inactive
            - pending
          example: "active"
        projectId:
          $ref: '#/components/schemas/ProjectId'
    ProjectAverage:
      type: object
      properties:
        timestamp: 
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        projectId:
          $ref: '#/components/schemas/ProjectId'
        averageOutput:
          type: number
          format: float
          example: 95.8
    Device:
      type: object
      properties:
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        projectId:
          $ref: '#/components/schemas/ProjectId'
    DERMetadata:
      type: object
      properties:
        derId:
          $ref: '#/components/schemas/DERId'
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        deviceType:
          type: string
          enum:
            - solar
            - ev
            - battery
        nameplateCapacity:
          type: number
          format: float
          example: 99.8
        powerCapacity:
          type: number
          format: float
          example: 95.8
    DERData:
      type: object
      properties:
        DERDataId:
          $ref: '#/components/schemas/DERDataId'
        DERId:
          $ref: '#/components/schemas/DERId'
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        currentOutput:
          type: number
          format: float
          example: 97.5
        units:
          type: string
          enum:
            - kw/h
        isOnline:
          type: boolean
          example: true
        isStandalone:
          type: boolean
          example: true
        connectionStartAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        currentSoc:
          type: number
          format: float
          example: 53.6
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    firebase_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Use Firebase ID token as the Bearer token.
    service_account_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Authentication using a GCP service account token. 
    api_key:
      type: apiKey
      name: api_key
      in: header