openapi: 3.0.3
info:
  title: Grid Stream API Spec - OpenAPI 3.0
  version: 1.0.12
  description: |
    API spec for Grid Stream with updated schema.
  contact:
    email: eric.cuenat@unb.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: TODO
paths:
  /v1/projects:
    post:
      tags:
        - projects
      summary: Create a new project
      description: Creates a new project. The `id` will be generated by the backend.
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
      responses:
        '201':
          description: Successfully created project
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "projID_123456789"
                  project:
                    $ref: '#/components/schemas/Projects'
        '400':
          description: Invalid project data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []

  /v1/contracts:
    post:
      tags:
        - contracts
      summary: Create a new contract
      description: Creates a new contract. The `id` will be generated by the backend.
      operationId: createContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contracts'
      responses:
        '201':
          description: Successfully created contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "contractID_123456789"
                  contract:
                    $ref: '#/components/schemas/Contracts'
        '400':
          description: Invalid contract data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
        
  /v1/contracts/{id}:
    get:
      tags:
        - contracts
      summary: Get existing contract by ID
      description: Returns a single contract by its ID
      operationId: getContractById
      parameters:
        - name: id
          in: path
          description: ID of the contract to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found contract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts'
        '404':
          description: Contract not found
        '400':
          description: Invalid contract ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    put:
      tags:
        - contracts
      summary: Update an existing contract
      description: Updates the details of a contract
      operationId: updateContract
      parameters:
        - name: id
          in: path
          description: ID of the contract to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contracts'
      responses:
        '200':
          description: Successfully updated contract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts'
        '404':
          description: Contract not found
        '400':
          description: Invalid contract data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    delete:
      tags:
        - contracts
      summary: Delete an existing contract
      description: Deletes a contract by its ID
      operationId: deleteContract
      parameters:
        - name: id
          in: path
          description: ID of the contract to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted contract
        '404':
          description: Contract not found
        '400':
          description: Invalid contract ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []

  /v1/der-metadata:
    post:
      tags:
        - der-metadata
      summary: Create DER metadata
      description: >
        Creates metadata for a Distributed Energy Resource (DER). 
        The `id` will be generated by the backend and included in the response.
      operationId: createDERMetadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DERMetadata'
      responses:
        '201':
          description: Successfully created DER metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "DERMetaID_123456789"
                  derMetadata:
                    $ref: '#/components/schemas/DERMetadata'
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized request
      security:
        - firebase_auth: []

  /v1/der-metadata/{id}:
    get:
      tags:
        - der-metadata
      summary: Get DER metadata by ID
      description: Returns metadata for a Distributed Energy Resource (DER) by its ID
      operationId: getDERMetadataById
      parameters:
        - name: id
          in: path
          description: ID of the DER to retrieve metadata for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found DER metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DERMetadata'
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    put:
      tags:
        - der-metadata
      summary: Update existing DER metadata
      description: Updates the metadata for a Distributed Energy Resource (DER)
      operationId: updateDERMetadata
      parameters:
        - name: id
          in: path
          description: ID of the DER to update metadata for
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DERMetadata'
      responses:
        '200':
          description: Successfully updated DER metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DERMetadata'
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    delete:
      tags:
        - der-metadata
      summary: Delete DER metadata
      description: Deletes metadata for a Distributed Energy Resource (DER) by its ID
      operationId: deleteDERMetadata
      parameters:
        - name: id
          in: path
          description: ID of the DER to delete metadata for
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted DER metadata
        '404':
          description: DER metadata not found
        '400':
          description: Invalid DER ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
        
  /v1/projects/{id}:
    get:
      tags:
        - projects
      summary: Get existing project by ID
      description: Returns a single project by its ID
      operationId: getProjectById
      parameters:
        - name: id
          in: path
          description: ID of the project to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully found project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '404':
          description: Project not found
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    put:
      tags:
        - projects
      summary: Update an existing project
      description: Updates the details of a project
      operationId: updateProject
      parameters:
        - name: id
          in: path
          description: ID of the project to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
      responses:
        '200':
          description: Successfully updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '404':
          description: Project not found
        '400':
          description: Invalid project data
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
    delete:
      tags:
        - projects
      summary: Delete an existing project
      description: Deletes a project by its ID
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          description: ID of the project to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted project
        '404':
          description: Project not found
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized request from user
      security:
        - firebase_auth: []
        
  /v1/project-averages:
    post:
      tags:
        - project-averages
      summary: Create a new Project Average
      description: >
        Creates a new Project Average record. This endpoint is intended for internal
        use by a service and should not be directly accessed by users.
      operationId: createProjectAverage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAverages'
      responses:
        '201':
          description: Successfully created a Project Average record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAverages'
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized request
      security:
        - service_account_auth: []

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged-in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '201':
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Invalid user data
        '401':
          description: Unauthorized request from user
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates a list of users with the given input array
      description: Creates a list of users with the given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Users'
      responses:
        '201':
          description: Successfully created users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '400':
          description: Invalid user data
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: phone
          in: query
          description: The phone number for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid phone/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged-in user session
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged-in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: User not found
        '400':
          description: Invalid user data
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted user
        '404':
          description: User not found
        '400':
          description: Invalid user ID


components:
  schemas:
    DERData:
      type: object
      properties:
        id:
          type: string
        der_id:
          type: string
        type:
          type: string
        timestamp:
          type: string
          format: date-time
        current_output:
          type: number
          format: float
        units:
          type: string
        project_id:
          type: string
        is_online:
          type: boolean
        is_standalone:
          type: boolean
        connection_start_at:
          type: string
          format: date-time
        current_soc:
          type: number
          format: float
        power_meter_measurement:
          type: number
          format: float
        contract_threshold:
          type: number
          format: float
        baseline:
          type: number
          format: float

    DERMetadata:
      type: object
      properties:
        id:
          type: string
        project_id:
          type: string
        type:
          type: string
        nameplate_capacity:
          type: number
          format: float
        power_capacity:
          type: number
          format: float
    Contracts:
      type: object
      properties:
        id:
          type: string
        contract_threshold:
          type: number
          format: float
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        status:
          type: string
        project_id:
          type: string

    ProjectAverages:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        project_id:
          type: string
        end_time:
          type: string
          format: date-time
        baseline:
          type: number
          format: float
        contract_threshold:
          type: number
          format: float
        average_output:
          type: number
          format: float

    Projects:
      type: object
      properties:
        id:
          type: string
        utility_id:
          type: string
        user_id:
          type: string
        location:
          type: string

    Utility:
      type: object
      properties:
        id:
          type: string
        display_name:
          type: string

    Users:
      type: object
      properties:
        id:
          type: string
        phone:
          type: string
        password:
          type: string
        display_name:
          type: string
        role:
          type: string

  securitySchemes:
    firebase_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Use Firebase ID token as the Bearer token.
    service_account_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Authentication using a GCP service account token. 
    api_key:
      type: apiKey
      name: api_key
      in: header